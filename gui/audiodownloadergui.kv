# ---------- audiodownloadergui.kv  ----------

# Next import instructions avoid importing the classes in the
# *.py python file, import instruction which will be removed by
# Pycharm when optimizing the imports or applying some refactoring !

#: import ScrollEffect kivy.effects.scroll.ScrollEffect

<AudioDownloaderGUI>: # sub-class of Screen
	name: "audioDownloaderScreen"
	requestInput: request_TextInput
	requestListRV: request_RecycleView_list
	outputScrollView: scrlv_out
	outputLabel: ro_output_Label
	toggleVideoHistoButton: toggle_video_history_list_Button
	deleteButton: delete_Button
	replaceButton: replace_Button
	replayAllButton: replay_all_Button
	moveUpButton: moveUp_Button
	moveDownButton: moveDown_Button
	boxLayoutContainingStatusBar: boxlayout_statusbar
	statusBarScrollView: scrlv_status_bar
	statusBarTextInput: status_bar
	clearResultOutputButton: clear_output_Button
	stopDownloadButton: stop_download_Button
	requestListRVSelBoxLayout: selectable_recyclebox_layout
	boxLayoutContainingRV: boxlayout_recycleview
	downloadButton: download_Button
	BoxLayout:
		orientation: "vertical"

		# adding main windows borders. Does not impact sub widgets !
		padding: 5
		spacing: 5

		canvas.before:
			Color:
				rgb: [0.22,0.22,0.22]
			Rectangle:
				pos: self.pos
				size: self.size

		BoxLayout:
			size_hint_y: None
			height: "28dp"
			canvas.before:
				Color:
					rgb: [0,0,0]
				Rectangle:
					pos: self.pos
					size: self.size

			GridLayout:
				cols: 3
				TextInput:
					id: request_TextInput
					background_color: 0,0,0,0
					foreground_color: 1,1,1,1
					focus: True
					multiline: False
					#ENTER triggers root.submitRequest()
					on_text_validate: root.submitRequest()
					on_text: root.ensureLowercase()
				Button:
					id: download_Button
					text: 'Download'
					size_hint_x: None
		#			width: 80 # Windows
		#			width: 180 # tablet
					width: 300 # smartphone
					on_press: root.downloadFromClipboard()
				Button:
					id: stop_download_Button
					text: 'Stop'
					size_hint_x: None
		#			width: 40 # Windows
		#			width: 80 # tablet
					width: 130 # smartphone
					disabled: True
					on_press: root.stopDownload()

		BoxLayout:
			size_hint_y: None
			height: "28dp"
			ToggleButton:
				id: toggle_video_history_list_Button
				text: "Videos"
				size_hint_x: 15
				disabled:True
				on_press: root.toggleVideoHistoryList()
			ToggleButton:
				id: toggle_playlist_history_list_Button
				text: "Playlists"
				size_hint_x: 15
				disabled:True
				on_press: root.togglePlaylistHistoryList()
			Button:
				id: delete_Button
				text: "Delete"
				size_hint_x: 15
				disabled: True
				on_press: root.deleteRequest()
			Button:
				id: replace_Button
				text: "Replace"
				size_hint_x: 15
				disabled: True
				on_press: root.replaceRequest()
			Button:
				id: moveUp_Button
				size_hint_x: 8
				disabled: True
				on_press: selectable_recyclebox_layout.moveItemUp()
				StackLayout:
					pos: self.parent.pos
					size: self.parent.size
					orientation: 'lr-tb'
					Image:
						source: 'arrow-up-32-disabled.png' if self.parent.disabled else 'arrow-up-32.png'
						size_hint_x: 1
						width: 74
			Button:
				id: moveDown_Button
				size_hint_x: 8
				disabled: True
				on_press: selectable_recyclebox_layout.moveItemDown()
				StackLayout:
					pos: self.parent.pos
					size: self.parent.size
					orientation: 'lr-tb'
					Image:
						source: 'arrow-down-32-disabled.png' if self.parent.disabled else 'arrow-down-32.png'
						size_hint_x: 1
						width: 74
			Button:
				id: replay_all_Button
				text: "Repl All"
				# disabling the button without removing it definitively
				width: 0
				height: 0
				opacity: 0
				size_hint: None, None
				disabled: True
				#size_hint_x: 15
				on_press: root.replayAllRequests()
			Button:
				id: menu_Button
				text: "..."
				size_hint_x: 13
				on_release: root.openDropDownMenu(self)

		BoxLayout:
			id: boxlayout_recycleview
			size_hint_y: None
			height: "0dp"

			RecycleView:
				id: request_RecycleView_list
				rootGUI: root
				scroll_y: 0 # forces scrolling to list bottom after adding an entry
				effect_cls: "ScrollEffect" # prevents overscrolling
				viewclass: 'SelectableLabel'
				scroll_type: ['bars', 'content']
				scroll_wheel_distance: dp(114)
				bar_width: dp(10)

				AudioDownloadSelectableRecycleBoxLayout:
					id: selectable_recyclebox_layout
				    appGUI: root
					key_selection: 'selectable' # required so that 'selectable'
												# key/value can be added to
												# RecycleView data items
					default_size: None, dp(15)
					default_size_hint: 1, None
					size_hint_y: None
					height: self.minimum_height
					spacing: 0.5
					orientation: 'vertical'
					multiselect: False
					touch_multiselect: False

		ScrollView:
			id: scrlv_out
			canvas.before:
				Color:
					rgb: [0,0,0]
				Rectangle:
					pos: self.pos
					size: self.size
			effect_cls: "ScrollEffect" #prevents overscrolling
			#scroll_y: 0 # forces scrolling to bottom after adding text. Works only on TextInput, not on Label !!!
			do_scroll_x: False # limiting to vertical scrolling
			do_scroll_y: True

			Label:
				id: ro_output_Label
				size_hint_y: None
				height: self.texture_size[1]
	#			size_hint: (1, None)
	#			height: max(self.minimum_height, scrlv_out.height) #required to enable scrolling when output starts to grow
				text_size: (self.width-20), None
				# max_lines: 1000 no effect !
				line_height: 0.9
				background_color: 0,0,0,0
				foreground_color: 1,1,1,1
				valign: "top"
				markup: True

		BoxLayout:
			id: boxlayout_statusbar
			size_hint_y: None
			height: "43dp" # enables two lines display for fiat computation formula
			canvas.before:
				Color:
					rgb: [0,0,0]
				Rectangle:
					pos: self.pos
					size: self.size

			GridLayout:
				cols: 2
				ScrollView:
					id: scrlv_status_bar
	#				do_scroll_y: False # limiting to horizontal scrolling
					effect_cls: ScrollEffect #prevents overscrolling
					Label:
						id: status_bar
                        size_hint_y: None
                        height: self.texture_size[1]
            #			size_hint: (1, None)
            #			height: max(self.minimum_height, scrlv_out.height) #required to enable scrolling when output starts to grow
                        text_size: (self.width-20), None
                        # max_lines: 1000 no effect !
                        line_height: 0.9
                        background_color: 0,0,0,0
                        foreground_color: 1,1,1,1
                        valign: "top"
                        markup: True
				Button:
					id: clear_output_Button
					text: 'Clear'
					size_hint_x: None
					width: 130
					disabled: True
					on_press: root.clearOutput()

<SelectableLabel>:
	# Draw a background to indicate selection
	canvas.before:
		Color:
			rgba: (1, 0, 0, 1) if self.selected else (.0, 0.9, .1, .3)
		Rectangle:
			pos: self.pos
			size: self.size
		Color:
			rgba: (0, 0.9, .1, .3)

<ScrollableLabelPopup>: # sub-class of AbstractPopup, which derives from Popup
	id: scr_popup
	auto_dismiss: False
	contentBox: content_box
	scrollView: scroll_view
	nextPageButton: next_page_button
	prevPageButton: prev_page_button

	BoxLayout:
		id: content_box
		orientation: "vertical"
		content: content_text

		ScrollView:
			id: scroll_view
			effect_cls: "ScrollEffect" # prevents overscrolling
			do_scroll_x: False # limiting to vertical scrolling
			Label:
				id: content_text
				size_hint_y: None
				height: self.texture_size[1]
				text_size: (self.width-20), None
				line_height: 0.9
				valign: "top"
				markup: True

		BoxLayout:
			orientation: 'horizontal'
			size_hint_y: None
			height: '28dp'
			Button:
				id: prev_page_button
				text: "Previous page"
				on_press: scr_popup.previousPage()
			Button:
				id: next_page_button
				text: "Next page"
				on_press: scr_popup.nextPage()
			Button:
				text: "Close"
				on_press: root.dismiss()